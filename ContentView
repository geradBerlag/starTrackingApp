//
//  ContentView.swift
//  Star Tracking Mount
//
//  Created by Gerardo Berlanga on 11/11/24.
//

import SwiftUI
import MapKit

struct ContentView : View {
    @ObservedObject var compassHeading = CompassHeading()
    // MARK: Instance of the location manager
    var locationManager = LocationManager()
    
    // MARK: Properties
    @State var location: CLLocation?
    
    // MARK: Body
    var body: some View {
        VStack{
            Text(location?.description ?? "No Location Yet")
                .fontWeight(.bold)
                .padding(.bottom, 20)
            
            Button {
                Task { await self.updateLocation() }
            } label: {
                Text("Get Location")
            }
        }
        .padding()
        .task {
            // 1. Check if the app is authorized to access the location services of the device
            locationManager.checkAuthorization()
        }
        
        VStack{
            Text(String(format: " %.0fÂ°", -1 * self.compassHeading.degrees.rounded()))
                .font(.largeTitle)
                .fontWeight(.bold)
                .padding(.bottom, 20)
            
            Capsule()
                .frame(width: 5,
                       height: 50)
            
            ZStack{
                ForEach(Marker.markers(), id: \.self) { marker in
                    CompassMarkerView(marker: marker,
                                      compassDegrees: -self.compassHeading.degrees)
                }
            }
            .frame(width: 300,
                   height: 300)
            .rotationEffect(Angle(degrees: self.compassHeading.degrees))
            .statusBar(hidden: true)
        }
    }
    func updateLocation() async {
        do {
            self.location = try await locationManager.currentLocation
        } catch {
            print("Could not get user location: \(error.localizedDescription)")
        }
    }
}

struct Marker: Hashable {
    let degrees: Double
    let label: String
    
    init(degrees: Double, label: String = "") {
        self.degrees = degrees
        self.label = label
    }
    
    static func markers() -> [Marker] {
        return [
            Marker(degrees: 0, label: "N"),
            Marker(degrees: 30),
            Marker(degrees: 60),
            Marker(degrees: 90, label: "E"),
            Marker(degrees: 120),
            Marker(degrees: 150),
            Marker(degrees: 180, label: "S"),
            Marker(degrees: 210),
            Marker(degrees: 240),
            Marker(degrees: 270, label: "W"),
            Marker(degrees: 300),
            Marker(degrees: 330)
        ]
    }
    
    func degreeText() -> String {
        return String(format: "%.0f", self.degrees)
    }
}

struct CompassMarkerView: View {
    let marker: Marker
    let compassDegrees: Double
    
    var body: some View {
        VStack {
            Text(marker.degreeText())
                .fontWeight(.medium)
                .rotationEffect(self.textAngle())
            
            Capsule()
                .frame(width: self.capsuleWidth(),
                       height: self.capsuleHeight())
                .foregroundColor(self.capsuleColor())
            
            Text(marker.label)
                .fontWeight(.bold)
                .rotationEffect(self.textAngle())

             Spacer(minLength: 120)
        }
        .rotationEffect(Angle(degrees: marker.degrees))
    }
    
    private func capsuleWidth() -> CGFloat {
        return self.marker.degrees == 0 ? 7 : 3
    }
    
    private func capsuleHeight() -> CGFloat {
        return self.marker.degrees == 0 ? 45 : 30
    }
    
    private func capsuleColor() -> Color {
        return self.marker.degrees == 0 ? .red : .gray
    }
    
    private func textAngle() -> Angle {
        return Angle(degrees: self.compassDegrees - self.marker.degrees)
    }
}

#Preview {
    ContentView()
}
